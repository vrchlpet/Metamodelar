/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.cvut.MMN.view.core;

import java.awt.BorderLayout;
import java.awt.Image;
import java.util.logging.Logger;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JToolBar;
import org.cvut.MMN.controller.IController;
import org.cvut.MMN.view.palette.MyPaletteActions;
import org.cvut.MMN.view.palette.ShapeCategoryContainer;
import org.cvut.MMN.view.palette.ShapePaletteManager;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.netbeans.spi.palette.PaletteActions;
import org.netbeans.spi.palette.PaletteController;
import org.netbeans.spi.palette.PaletteFactory;
import org.openide.awt.UndoRedo;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Node;
import org.openide.util.Utilities;
import org.openide.util.lookup.Lookups;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.cvut.MMN.view.core//ShapeView//EN",
autostore = false)
public final class ShapeViewTopComponent extends TopComponent implements MultiViewElement {

    private IController controller;
    private JToolBar toolbar = new JToolBar();
    private MultiViewElementCallback callback = null;

    private ShapePaletteManager paletteRoot;

    private JButton btAddShape;
    private JButton btRemoveShape;
    private JButton btEditShape;

    private JComponent myView;


    private static ShapeViewTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "ShapeViewTopComponent";

    public ShapeViewTopComponent(IController controller) {
        this.controller = controller;

        initComponents();

        Image image = Utilities.loadImage("org/cvut/MMN/view/core/addShape.gif");
        ImageIcon iconBtAddShape = new ImageIcon(image);
        Image image2 = Utilities.loadImage("org/cvut/MMN/view/core/removeShape.gif");
        ImageIcon iconBtRemoveShape = new ImageIcon(image2);
        btAddShape = new JButton(iconBtAddShape);
        btAddShape.addActionListener(new AddShapeActionListener(this));
        btAddShape.setToolTipText("Add new shape");
        btRemoveShape = new JButton(iconBtRemoveShape);
        btRemoveShape.addActionListener(new RemoveShapeActionListener(this));
        btRemoveShape.setToolTipText("Remove shape");
        toolbar.setFloatable(false);

        btEditShape = new JButton("Edit Shape");
        btEditShape.addActionListener(new EditShapeActionListener(this.getController()));
        btEditShape.setToolTipText("Edit shape");

        toolbar.add(new JToolBar.Separator());
        toolbar.add(btAddShape);
        toolbar.add(btRemoveShape);
        toolbar.add(btEditShape);


        EditorSceneImpl scene = new EditorSceneImpl(this.controller);
        //scene.addAcceptAction(new ConnectionAcceptProvider(scene));
        scene.addAcceptAction(new ShapeAcceptProvider(scene));
        myView = scene.createView();

        scenePane.setViewportView(myView);
        add(scene.createSatelliteView(), BorderLayout.WEST);

        paletteRoot = new ShapePaletteManager(new ShapeCategoryContainer(controller));
        PaletteActions a = new MyPaletteActions();
        PaletteController p = PaletteFactory.createPalette(paletteRoot, a);
        associateLookup(Lookups.fixed(p));
    }

    public ShapePaletteManager getShapePaletteManager() {
        return this.paletteRoot;
    }

    public IController getController() {
        return this.controller;
    }

    public ShapeViewTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ShapeViewTopComponent.class, "CTL_ShapeViewTopComponent"));
        setToolTipText(NbBundle.getMessage(ShapeViewTopComponent.class, "HINT_ShapeViewTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scenePane = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());
        add(scenePane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scenePane;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized ShapeViewTopComponent getDefault() {
        if (instance == null) {
            instance = new ShapeViewTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the ShapeViewTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ShapeViewTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(ShapeViewTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ShapeViewTopComponent) {
            return (ShapeViewTopComponent) win;
        }
        Logger.getLogger(ShapeViewTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }


    public JComponent getVisualRepresentation() {
        return this;
    }

    public JComponent getToolbarRepresentation(){
        return toolbar;
    }

    public Action[] getActions(){
        if(callback != null) {
            return callback.createDefaultActions();
        } else {
            return new Action[]{};
        }
    }

    public void componentOpened(){
        //callback.updateTitle("View 2");
    }

    public void componentClosed(){}

    public void componentShowing(){}

    public void componentHidden(){}

    public void componentActivated(){
        //callback.updateTitle("View 2");
    }

    public void componentDeactivated(){}

    public UndoRedo getUndoRedo(){
        return UndoRedo.NONE;
    }

    public void setMultiViewCallback(MultiViewElementCallback mvec){
        callback = mvec;
    }

    public CloseOperationState canCloseElement(){
        return CloseOperationState.STATE_OK;
    }
}
